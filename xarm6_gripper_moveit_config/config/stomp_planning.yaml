stomp/xarm6:
  group_name: xarm6
  optimization:
    num_timesteps: 60
    num_iterations: 40
    num_iterations_after_valid: 0
    num_rollouts: 30
    max_rollouts: 30
    initialization_method: 1 #[1 : LINEAR_INTERPOLATION, 2 : CUBIC_POLYNOMIAL, 3 : MININUM_CONTROL_COST]
    control_cost_weight: 0.0
  task:
    noise_generator:
      - class: stomp_moveit/NormalDistributionSampling
        stddev: [0.05, 0.05, 0.1, 0.5, 0.5, 0.4]
    cost_functions:
      - class: stomp_moveit/CollisionCheck
        collision_penalty: 1.0
        cost_weight: 1.0
        kernel_window_percentage: 0.20
        longest_valid_joint_move: 0.05
    noisy_filters:
      - class: stomp_moveit/JointLimits
        lock_start: True
        lock_goal: True
      - class: stomp_moveit/MultiTrajectoryVisualization
        line_width: 0.002
        rgb: [255, 255, 0]
        marker_array_topic: stomp_trajectories
        marker_namespace: noisy
    update_filters:
      - class: stomp_moveit/PolynomialSmoother
        poly_order: 6
      - class: stomp_moveit/TrajectoryVisualization
        line_width: 0.002
        rgb: [0, 191, 255]
        error_rgb: [255, 0, 0]
        publish_intermediate: True
        marker_topic: stomp_trajectory
        marker_namespace: optimized
  # optimization: # 最適化パラメータ
  #   num_timesteps: 50 # パスを離散的な時間ステップに分けるためのの分割数
  #   num_iterations: 100 # パスを見つけるために反復する回数
  #   num_iterations_after_valid: 0 # パスをさらに改善するために成功後に反復する回数
  #   num_rollouts: 0 # 1回のSTOMP最適化で生成する個々のサンプル軌道の数
  #   max_rollouts: 0 # STOMPが生成しようとする最大のサンプル軌道の数
  #   # 例:もし max_rollouts が 500 で、num_rollouts が 100 ならば、STOMPは最大で5回まで最適化ステップを実行し、総計で500個のサンプル軌道を生成
  #   initialization_method: 1 #[1 : 線形補間, 2 : 三次多項式(三次スプラインを使用), 3 : 最小制御コスト(共分散行列を使用), 4 : FILL_TRACJECTORY]
  #   control_cost_weight: 0.0 # 制御コストに対する重み(0推奨)
  
  # task: # タスクパラメータ
  #   noise_generator: # 軌道にランダムなノイズを付与
  #     - class: stomp_moveit/NormalDistributionSampling
  #       stddev: [0.1, 0.1, 0.1, 0.5, 0.5, 0.1] # 各関節のノイズの標準偏差
  #   cost_functions: # コスト関数の設定
  #     - class: stomp_moveit/CollisionCheck # 衝突についての設定
  #       collision_penalty: 0.3 # 衝突が検出された場合に適用されるペナルティの強さ
  #       cost_weight: 1.0 # 重み
  #       kernel_window_percentage: 0.2 # カーネルのウィンドウサイズ, 関節の動き全体に対して何割の範囲をカバーするか
  #       longest_valid_joint_move: 0.5 # 各関節が一度に動くことができる最大の距離
  #     - class: stomp_moveit/ObstacleDistanceGradient # 障害物との距離を評価し, その勾配を考慮
  #       max_distance: 0.01 # 軌道が障害物からどの程度離れているか
  #       # 例: 0.2 と設定されている場合, アルゴリズムは障害物までの距離が 0.2 よりも短い軌道を好むようになる
  #       cost_weight: 1.0 # 重み
  #       longest_valid_joint_move: 0.5 # 各関節が一度に動くことができる最大の距離
  #   noisy_filters: # ノイズフィルタの制約
  #     - class: stomp_moveit/JointLimits # 関節角度の制約
  #       lock_start: True # スタートの関節角度を固定するかどうか
  #       lock_goal: True # ゴールの関節角度を固定するかどうか
  #     - class: stomp_moveit/MultiTrajectoryVisualization # 可視化について(調整には関係なし)
  #       line_width: 0.02
  #       rgb: [0, 255, 0]
  #       marker_array_topic: stomp_trajectories
  #       marker_namespace: noisy
  #   update_filters: # 反復ごとに適用されるフィルタの制約
  #     - class: stomp_moveit/PolynomialSmoother # 軌道の可視化に関するフィルタ
  #       poly_order: 5 # 多項式の次数
  #     - class: stomp_moveit/TrajectoryVisualization # 可視化について(調整には関係なし)
  #       line_width: 0.02
  #       rgb: [191, 0, 255]
  #       error_rgb: [255, 0, 0]
  #       publish_intermediate: True
  #       marker_topic: stomp_trajectory
  #       marker_namespace: optimized
